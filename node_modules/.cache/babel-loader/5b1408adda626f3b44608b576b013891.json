{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n// Styles\nimport \"../../../src/components/VTextField/VTextField.sass\";\nimport \"../../../src/components/VOtpInput/VOtpInput.sass\"; // Extensions\n\nimport VInput from '../VInput';\nimport VTextField from '../VTextField/VTextField'; // Directives\n\nimport ripple from '../../directives/ripple'; // Utilities\n\nimport { convertToUnit, keyCodes } from '../../util/helpers';\nimport { breaking } from '../../util/console'; // Types\n\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(VInput);\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-otp-input',\n  directives: {\n    ripple\n  },\n  inheritAttrs: false,\n  props: {\n    length: {\n      type: [Number, String],\n      default: 6\n    },\n    type: {\n      type: String,\n      default: 'text'\n    },\n    plain: Boolean\n  },\n  data: () => ({\n    badInput: false,\n    initialValue: null,\n    isBooted: false,\n    otp: []\n  }),\n  computed: {\n    outlined() {\n      return !this.plain;\n    },\n\n    classes() {\n      return { ...VInput.options.computed.classes.call(this),\n        ...VTextField.options.computed.classes.call(this),\n        'v-otp-input--plain': this.plain\n      };\n    },\n\n    isDirty() {\n      return VInput.options.computed.isDirty.call(this) || this.badInput;\n    }\n\n  },\n  watch: {\n    isFocused: 'updateValue',\n\n    value(val) {\n      this.lazyValue = val;\n      this.otp = (val == null ? void 0 : val.split('')) || [];\n    }\n\n  },\n\n  created() {\n    var _this$internalValue;\n    /* istanbul ignore next */\n\n\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this);\n    }\n\n    this.otp = ((_this$internalValue = this.internalValue) == null ? void 0 : _this$internalValue.split('')) || [];\n  },\n\n  mounted() {\n    requestAnimationFrame(() => this.isBooted = true);\n  },\n\n  methods: {\n    /** @public */\n    focus(e, otpIdx) {\n      this.onFocus(e, otpIdx || 0);\n    },\n\n    genInputSlot(otpIdx) {\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: {\n          height: convertToUnit(this.height)\n        },\n        on: {\n          click: () => this.onClick(otpIdx),\n          mousedown: e => this.onMouseDown(e, otpIdx),\n          mouseup: e => this.onMouseUp(e, otpIdx)\n        }\n      }), [this.genDefaultSlot(otpIdx)]);\n    },\n\n    genControl(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control'\n      }, [this.genInputSlot(otpIdx)]);\n    },\n\n    genDefaultSlot(otpIdx) {\n      return [this.genFieldset(), this.genTextFieldSlot(otpIdx)];\n    },\n\n    genContent() {\n      return Array.from({\n        length: +this.length\n      }, (_, i) => {\n        return this.$createElement('div', this.setTextColor(this.validationState, {\n          staticClass: 'v-input',\n          class: this.classes\n        }), [this.genControl(i)]);\n      });\n    },\n\n    genFieldset() {\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true\n        }\n      }, [this.genLegend()]);\n    },\n\n    genLegend() {\n      const span = this.$createElement('span', {\n        domProps: {\n          innerHTML: '&#8203;'\n        }\n      });\n      return this.$createElement('legend', {\n        style: {\n          width: '0px'\n        }\n      }, [span]);\n    },\n\n    genInput(otpIdx) {\n      const listeners = Object.assign({}, this.listeners$);\n      delete listeners.change; // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.otp[otpIdx],\n          min: this.type === 'number' ? 0 : null\n        },\n        attrs: { ...this.attrs$,\n          disabled: this.isDisabled,\n          readonly: this.isReadonly,\n          type: this.type,\n          id: `${this.computedId}--${otpIdx}`,\n          class: `otp-field-box--${otpIdx}`,\n          maxlength: 1\n        },\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: e => this.onInput(e, otpIdx),\n          focus: e => this.onFocus(e, otpIdx),\n          paste: e => this.onPaste(e, otpIdx),\n          keydown: this.onKeyDown,\n          keyup: e => this.onKeyUp(e, otpIdx)\n        }),\n        ref: 'input',\n        refInFor: true\n      });\n    },\n\n    genTextFieldSlot(otpIdx) {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot'\n      }, [this.genInput(otpIdx)]);\n    },\n\n    onBlur(e) {\n      this.isFocused = false;\n      e && this.$nextTick(() => this.$emit('blur', e));\n    },\n\n    onClick(otpIdx) {\n      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return;\n      this.onFocus(undefined, otpIdx);\n    },\n\n    onFocus(e, otpIdx) {\n      e == null ? void 0 : e.preventDefault();\n      e == null ? void 0 : e.stopPropagation();\n      const elements = this.$refs.input;\n      const ref = this.$refs.input && elements[otpIdx || 0];\n      if (!ref) return;\n\n      if (document.activeElement !== ref) {\n        ref.focus();\n        return ref.select();\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true;\n        ref.select();\n        e && this.$emit('focus', e);\n      }\n    },\n\n    onInput(e, otpIdx) {\n      const target = e.target;\n      const value = target.value;\n      this.applyValue(otpIdx, target.value, () => {\n        this.internalValue = this.otp.join('');\n      });\n      this.badInput = target.validity && target.validity.badInput;\n      const nextIndex = otpIdx + 1;\n\n      if (value) {\n        if (nextIndex < +this.length) {\n          this.changeFocus(nextIndex);\n        } else {\n          this.clearFocus(otpIdx);\n          this.onCompleted();\n        }\n      }\n    },\n\n    clearFocus(index) {\n      const input = this.$refs.input[index];\n      input.blur();\n    },\n\n    onKeyDown(e) {\n      if (e.keyCode === keyCodes.enter) {\n        this.$emit('change', this.internalValue);\n      }\n\n      this.$emit('keydown', e);\n    },\n\n    onMouseDown(e, otpIdx) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input[otpIdx]) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e);\n    },\n\n    onMouseUp(e, otpIdx) {\n      if (this.hasMouseDown) this.focus(e, otpIdx);\n      VInput.options.methods.onMouseUp.call(this, e);\n    },\n\n    onPaste(event, index) {\n      var _event$clipboardData;\n\n      const maxCursor = +this.length - 1;\n      const inputVal = event == null ? void 0 : (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.getData('Text');\n      const inputDataArray = (inputVal == null ? void 0 : inputVal.split('')) || [];\n      event.preventDefault();\n      const newOtp = [...this.otp];\n\n      for (let i = 0; i < inputDataArray.length; i++) {\n        const appIdx = index + i;\n        if (appIdx > maxCursor) break;\n        newOtp[appIdx] = inputDataArray[i].toString();\n      }\n\n      this.otp = newOtp;\n      this.internalValue = this.otp.join('');\n      const targetFocus = Math.min(index + inputDataArray.length, maxCursor);\n      this.changeFocus(targetFocus);\n\n      if (newOtp.length === +this.length) {\n        this.onCompleted();\n        this.clearFocus(targetFocus);\n      }\n    },\n\n    applyValue(index, inputVal, next) {\n      const newOtp = [...this.otp];\n      newOtp[index] = inputVal;\n      this.otp = newOtp;\n      next();\n    },\n\n    changeFocus(index) {\n      this.onFocus(undefined, index || 0);\n    },\n\n    updateValue(val) {\n      // Sets validationState from validatable\n      this.hasColor = val;\n\n      if (val) {\n        this.initialValue = this.lazyValue;\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue);\n      }\n    },\n\n    onKeyUp(event, index) {\n      event.preventDefault();\n      const eventKey = event.key;\n\n      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {\n        return;\n      }\n\n      if (['Delete'].includes(eventKey)) {\n        return;\n      }\n\n      if (eventKey === 'ArrowLeft' || eventKey === 'Backspace' && !this.otp[index]) {\n        return index > 0 && this.changeFocus(index - 1);\n      }\n\n      if (eventKey === 'ArrowRight') {\n        return index + 1 < +this.length && this.changeFocus(index + 1);\n      }\n    },\n\n    onCompleted() {\n      const rsp = this.otp.join('');\n\n      if (rsp.length === +this.length) {\n        this.$emit('finish', rsp);\n      }\n    }\n\n  },\n\n  render(h) {\n    return h('div', {\n      staticClass: 'v-otp-input',\n      class: this.themeClasses\n    }, this.genContent());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VInput","VTextField","ripple","convertToUnit","keyCodes","breaking","mixins","baseMixins","extend","name","directives","inheritAttrs","props","length","type","Number","String","default","plain","Boolean","data","badInput","initialValue","isBooted","otp","computed","outlined","classes","options","call","isDirty","watch","isFocused","value","val","lazyValue","split","created","$attrs","hasOwnProperty","internalValue","mounted","requestAnimationFrame","methods","focus","e","otpIdx","onFocus","genInputSlot","$createElement","setBackgroundColor","backgroundColor","staticClass","style","height","on","click","onClick","mousedown","onMouseDown","mouseup","onMouseUp","genDefaultSlot","genControl","genFieldset","genTextFieldSlot","genContent","Array","from","_","i","setTextColor","validationState","class","attrs","genLegend","span","domProps","innerHTML","width","genInput","listeners","Object","assign","listeners$","change","min","attrs$","disabled","isDisabled","readonly","isReadonly","id","computedId","maxlength","blur","onBlur","input","onInput","paste","onPaste","keydown","onKeyDown","keyup","onKeyUp","ref","refInFor","$nextTick","$emit","$refs","undefined","preventDefault","stopPropagation","elements","document","activeElement","select","target","applyValue","join","validity","nextIndex","changeFocus","clearFocus","onCompleted","index","keyCode","enter","hasMouseDown","event","maxCursor","inputVal","clipboardData","_event$clipboardData","getData","inputDataArray","newOtp","appIdx","toString","targetFocus","Math","next","updateValue","hasColor","eventKey","key","includes","rsp","render","h","themeClasses"],"sourceRoot":"","sources":["../../../src/components/VOtpInput/VOtpInput.ts"],"sourcesContent":["// Styles\nimport '../VTextField/VTextField.sass'\nimport './VOtpInput.sass'\n\n// Extensions\nimport VInput from '../VInput'\nimport VTextField from '../VTextField/VTextField'\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { convertToUnit, keyCodes } from '../../util/helpers'\nimport { breaking } from '../../util/console'\n\n// Types\nimport mixins from '../../util/mixins'\nimport { VNode } from 'vue'\n\nconst baseMixins = mixins(\n  VInput,\n)\n\ninterface options extends InstanceType<typeof baseMixins> {\n  $refs: {\n    input: HTMLInputElement[]\n  }\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-otp-input',\n\n  directives: {\n    ripple,\n  },\n\n  inheritAttrs: false,\n\n  props: {\n    length: {\n      type: [Number, String],\n      default: 6,\n    },\n    type: {\n      type: String,\n      default: 'text',\n    },\n    plain: Boolean,\n  },\n\n  data: () => ({\n    badInput: false,\n    initialValue: null,\n    isBooted: false,\n    otp: [] as string[],\n  }),\n\n  computed: {\n    outlined (): Boolean {\n      return !this.plain\n    },\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        ...VTextField.options.computed.classes.call(this),\n        'v-otp-input--plain': this.plain,\n      }\n    },\n    isDirty (): boolean {\n      return VInput.options.computed.isDirty.call(this) || this.badInput\n    },\n  },\n\n  watch: {\n    isFocused: 'updateValue',\n    value (val) {\n      this.lazyValue = val\n      this.otp = val?.split('') || []\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('browser-autocomplete')) {\n      breaking('browser-autocomplete', 'autocomplete', this)\n    }\n\n    this.otp = this.internalValue?.split('') || []\n  },\n\n  mounted () {\n    requestAnimationFrame(() => (this.isBooted = true))\n  },\n\n  methods: {\n    /** @public */\n    focus (e: Event, otpIdx: number) {\n      this.onFocus(e, otpIdx || 0)\n    },\n    genInputSlot (otpIdx: number) {\n      return this.$createElement('div', this.setBackgroundColor(this.backgroundColor, {\n        staticClass: 'v-input__slot',\n        style: { height: convertToUnit(this.height) },\n        on: {\n          click: () => this.onClick(otpIdx),\n          mousedown: (e: Event) => this.onMouseDown(e, otpIdx),\n          mouseup: (e: Event) => this.onMouseUp(e, otpIdx),\n        },\n      }), [this.genDefaultSlot(otpIdx)])\n    },\n    genControl (otpIdx: number) {\n      return this.$createElement('div', {\n        staticClass: 'v-input__control',\n      }, [\n        this.genInputSlot(otpIdx),\n      ])\n    },\n    genDefaultSlot (otpIdx: number) {\n      return [\n        this.genFieldset(),\n        this.genTextFieldSlot(otpIdx),\n      ]\n    },\n    genContent () {\n      return Array.from({ length: +this.length }, (_, i) => {\n        return this.$createElement('div', this.setTextColor(this.validationState, {\n          staticClass: 'v-input',\n          class: this.classes,\n        }), [this.genControl(i)])\n      })\n    },\n    genFieldset () {\n      return this.$createElement('fieldset', {\n        attrs: {\n          'aria-hidden': true,\n        },\n      }, [this.genLegend()])\n    },\n    genLegend () {\n      const span = this.$createElement('span', {\n        domProps: { innerHTML: '&#8203;' },\n      })\n\n      return this.$createElement('legend', {\n        style: {\n          width: '0px',\n        },\n      }, [span])\n    },\n    genInput (otpIdx: number) {\n      const listeners = Object.assign({}, this.listeners$)\n      delete listeners.change // Change should not be bound externally\n\n      return this.$createElement('input', {\n        style: {},\n        domProps: {\n          value: this.otp[otpIdx],\n          min: this.type === 'number' ? 0 : null,\n        },\n        attrs: {\n          ...this.attrs$,\n          disabled: this.isDisabled,\n          readonly: this.isReadonly,\n          type: this.type,\n          id: `${this.computedId}--${otpIdx}`,\n          class: `otp-field-box--${otpIdx}`,\n          maxlength: 1,\n        },\n        on: Object.assign(listeners, {\n          blur: this.onBlur,\n          input: (e: Event) => this.onInput(e, otpIdx),\n          focus: (e: Event) => this.onFocus(e, otpIdx),\n          paste: (e: ClipboardEvent) => this.onPaste(e, otpIdx),\n          keydown: this.onKeyDown,\n          keyup: (e: KeyboardEvent) => this.onKeyUp(e, otpIdx),\n        }),\n        ref: 'input',\n        refInFor: true,\n      })\n    },\n    genTextFieldSlot (otpIdx: number): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-text-field__slot',\n      }, [\n        this.genInput(otpIdx),\n      ])\n    },\n    onBlur (e?: Event) {\n      this.isFocused = false\n      e && this.$nextTick(() => this.$emit('blur', e))\n    },\n    onClick (otpIdx: number) {\n      if (this.isFocused || this.isDisabled || !this.$refs.input[otpIdx]) return\n\n      this.onFocus(undefined, otpIdx)\n    },\n    onFocus (e?: Event, otpIdx?: number) {\n      e?.preventDefault()\n      e?.stopPropagation()\n      const elements = this.$refs.input as HTMLInputElement[]\n      const ref = this.$refs.input && elements[otpIdx || 0]\n      if (!ref) return\n\n      if (document.activeElement !== ref) {\n        ref.focus()\n        return ref.select()\n      }\n\n      if (!this.isFocused) {\n        this.isFocused = true\n        ref.select()\n        e && this.$emit('focus', e)\n      }\n    },\n    onInput (e: Event, otpIdx: number) {\n      const target = e.target as HTMLInputElement\n      const value = target.value\n      this.applyValue(otpIdx, target.value, () => {\n        this.internalValue = this.otp.join('')\n      })\n      this.badInput = target.validity && target.validity.badInput\n\n      const nextIndex = otpIdx + 1\n      if (value) {\n        if (nextIndex < +this.length) {\n          this.changeFocus(nextIndex)\n        } else {\n          this.clearFocus(otpIdx)\n          this.onCompleted()\n        }\n      }\n    },\n    clearFocus (index: number) {\n      const input = this.$refs.input[index] as HTMLInputElement\n      input.blur()\n    },\n    onKeyDown (e: KeyboardEvent) {\n      if (e.keyCode === keyCodes.enter) {\n        this.$emit('change', this.internalValue)\n      }\n\n      this.$emit('keydown', e)\n    },\n    onMouseDown (e: Event, otpIdx: number) {\n      // Prevent input from being blurred\n      if (e.target !== this.$refs.input[otpIdx]) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      VInput.options.methods.onMouseDown.call(this, e)\n    },\n    onMouseUp (e: Event, otpIdx: number) {\n      if (this.hasMouseDown) this.focus(e, otpIdx)\n\n      VInput.options.methods.onMouseUp.call(this, e)\n    },\n    onPaste (event: ClipboardEvent, index: number) {\n      const maxCursor = +this.length - 1\n      const inputVal = event?.clipboardData?.getData('Text')\n      const inputDataArray = inputVal?.split('') || []\n      event.preventDefault()\n      const newOtp: string[] = [...this.otp]\n      for (let i = 0; i < inputDataArray.length; i++) {\n        const appIdx = index + i\n        if (appIdx > maxCursor) break\n        newOtp[appIdx] = inputDataArray[i].toString()\n      }\n      this.otp = newOtp\n      this.internalValue = this.otp.join('')\n      const targetFocus = Math.min(index + inputDataArray.length, maxCursor)\n      this.changeFocus(targetFocus)\n\n      if (newOtp.length === +this.length) { this.onCompleted(); this.clearFocus(targetFocus) }\n    },\n    applyValue (index: number, inputVal: string, next: Function) {\n      const newOtp: string[] = [...this.otp]\n      newOtp[index] = inputVal\n      this.otp = newOtp\n      next()\n    },\n    changeFocus (index: number) {\n      this.onFocus(undefined, index || 0)\n    },\n    updateValue (val: boolean) {\n      // Sets validationState from validatable\n      this.hasColor = val\n\n      if (val) {\n        this.initialValue = this.lazyValue\n      } else if (this.initialValue !== this.lazyValue) {\n        this.$emit('change', this.lazyValue)\n      }\n    },\n    onKeyUp (event: KeyboardEvent, index: number) {\n      event.preventDefault()\n      const eventKey = event.key\n      if (['Tab', 'Shift', 'Meta', 'Control', 'Alt'].includes(eventKey)) {\n        return\n      }\n      if (['Delete'].includes(eventKey)) {\n        return\n      }\n      if (eventKey === 'ArrowLeft' || (eventKey === 'Backspace' && !this.otp[index])) {\n        return index > 0 && this.changeFocus(index - 1)\n      }\n      if (eventKey === 'ArrowRight') {\n        return index + 1 < +this.length && this.changeFocus(index + 1)\n      }\n    },\n    onCompleted () {\n      const rsp = this.otp.join('')\n      if (rsp.length === +this.length) {\n        this.$emit('finish', rsp)\n      }\n    },\n  },\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-otp-input',\n      class: this.themeClasses,\n    }, this.genContent())\n  },\n})\n"]},"metadata":{},"sourceType":"module"}